{{/* vim: set filetype=gotmpl : */}}

{{- /*
Main entrypoint for a component.
Additional parameters:
  .deployedCluster: the cluster to deploy pods of this component in, either "core" or "worker"
  .binary: path to main process binary in the image
  .args: args passed to the container process (should include boilerplate args)
  .env: env vars set for the container process
  .volumes: dictionary of required volumes in BoilerplateVolumes format:
    key: volume name
    {mountPath, readOnly, subPath} (equivalent to container volumeMounts fields)
    + {source} containing the type-specific field in pod volumes
  .ports: dictionary of port name => container port number
  .rbacRules: the list of ClusterRole rules to be created in this release
  .clusters: list of cluster names (core, worker) that the main process requires
  */}}
{{- define "podseidon.boilerplate.entrypoint.obj"}}
{{- if get .main.Values.release .deployedCluster}}
---
{{include "podseidon.boilerplate.deployment.yaml" . | fromYaml | toYaml}}
{{- end}}
{{include "podseidon.boilerplate.aux.obj" .}}
{{- end}}

{{- /*
Deployment object for a component.
Additional parameters:
  = boilerplate.entrypoint
  */}}
{{- define "podseidon.boilerplate.deployment.yaml"}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{printf "%s-%s" .main.Release.Name .component | toJson}}
  labels: {{include "podseidon.boilerplate.labels.json" .}}
spec:
  replicas: {{toJson .generic.replicas}}
  minReadySeconds: {{toJson .generic.minReadySeconds}}
  strategy: {{toJson .generic.deployStrategy}}
  selector:
    matchLabels: {{include "podseidon.boilerplate.label-selector.yaml" . | fromYaml | toJson}}
  template:
    metadata:
      labels: {{include "podseidon.boilerplate.labels.json" .}}
      annotations: {{toJson .generic.podAnnotations | default (dict)}}
    spec: {{include "podseidon.boilerplate.pod.yaml" . | fromYaml | toJson}}
{{- end}}

{{- /*
Pod template for a component.
Additional parameters:
  = boilerplate.entrypoint
  */}}
{{- define "podseidon.boilerplate.pod.yaml"}}
{{- $image := get .main.Values.common.image .component | default dict | deepCopy | merge (deepCopy .main.Values.common.image)}}
serviceAccountName: {{include "podseidon.boilerplate.rbac-name.string" . | toJson}}
imagePullSecrets: {{toJson $image.pullSecrets}}
securityContext: {{toJson .generic.podSecurityContext}}
nodeSelector: {{toJson .generic.nodeSelector}}
affinity: {{toJson .generic.affinity}}
tolerations: {{toJson .generic.tolerations}}
containers:
  - {{include "podseidon.boilerplate.container.yaml" . | fromYaml | toJson}}
volumes: [
  {{- range $name, $volume := .volumes}}
  {{- dict "name" $name | deepCopy | merge (deepCopy $volume.source) | toJson}},
  {{- end}}
]
{{- end}}

{{- /*
Container template for a component.
Additional parameters:
  = boilerplate.entrypoint
  */}}
{{- define "podseidon.boilerplate.container.yaml"}}
name: main
securityContext: {{toJson .generic.containerSecurityContext}}
resources: {{toJson .generic.resources}}
{{- $image := get .main.Values.common.image .component | default dict | deepCopy | merge (deepCopy .main.Values.common.image)}}
image: {{printf "%s:%s" $image.repository ($image.tag | default .main.Chart.AppVersion) | toJson}}
imagePullPolicy: {{toJson $image.pullPolicy}}
{{- if .binary}}
command: [{{toJson .binary}}]
{{- end}}
args: {{(include "podseidon.boilerplate.args.yaml-array" . | fromYamlArray | toJson)}}
env: [
  {{- range $k, $v := .env}}
  {
    name: {{toJson $k}},
    {{- if typeIs "string" $v}}
    value: {{toJson $v}},
    {{- else}}
    valueFrom: {{toJson $v}},
    {{- end}}
  },
  {{- end}}
]
volumeMounts: [
  {{- range $name, $volume := .volumes}}
  {
    name: {{toJson $name}},
    mountPath: {{toJson $volume.mountPath}},
    {{- if hasKey $volume "readOnly"}}
    readOnly: {{toJson $volume.readOnly}},
    {{- end}}
    {{- if hasKey $volume "subPath"}}
    subPath: {{toJson $volume.subPath}},
    {{- end}}
  },
  {{- end}}
]
ports: [
  {{- range $_index, $portMap := .ports}}
  {{- range $portName, $portNumber := $portMap}}
  {
    name: {{toJson $portName}},
    containerPort: {{toJson $portNumber}},
    {{- if hasKey $.generic "hostPorts"}}
    {{- if hasKey $.generic.hostPorts $portName}}
    hostPort: {{get $.generic.hostPorts $portName | toJson}}
    {{- end}}
    {{- end}}
  },
  {{- end}}
  {{- end}}
]
{{- range .ports}}
{{- if hasKey . "healthz"}}
readinessProbe:
  httpGet:
    path: /readyz
    port: healthz
  failureThreshold: {{toJson $.generic.readiness.failureThreshold}}
  successThreshold: {{toJson $.generic.readiness.successThreshold}}
  periodSeconds: {{toJson $.generic.readiness.periodSeconds}}
  timeoutSeconds: {{toJson $.generic.readiness.timeoutSeconds}}
  initialDelaySeconds: {{toJson $.generic.readiness.initialDelaySeconds}}
{{- end}}
{{- end}}
{{- end}}

{{- /*
Auxiliary objects for a component.
Additional parameters:
  .rbacRules: the list of ClusterRole rules to be created in this release
  .clusters: list of cluster names (core, worker) that the main process requires
    Only required if deployedCluster is enabled
  */}}
{{- define "podseidon.boilerplate.aux.obj"}}
{{- dict
    "main" .main
    "component" .component
    "generic" .generic
    "rules" .rbacRules
  | include "podseidon.boilerplate.rbac.obj"}}

{{- /* Only include volume secrets if the deployment should be in the current cluster */}}
{{- if get .main.Values.release .deployedCluster}}
{{- range $index, $clusterName := .clusters}}
{{dict
    "config" (get $.generic (printf "%sCluster" $clusterName))
    "volumeName" (printf "%s-%s-%s-cluster" $.main.Release.Name $.component $clusterName)
    "argPrefix" $clusterName
  | include "podseidon.kubeconfig.extra-objects.obj"}}
{{- end}}
{{- end}}

{{- end}}
